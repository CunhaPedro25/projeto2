create table if not exists secretary
(
    id integer generated by default as identity,
    name varchar(70),
    email varchar(254) not null,
    password varchar not null,
    phone varchar not null,
    active boolean default true,
    constraint secretary_pk
    primary key (id),
    constraint secretary_pk_3
    unique (phone),
    constraint secretary_pk_2
    unique (email)
    );

create table if not exists engineer
(
    id integer generated always as identity,
    name varchar(70),
    email varchar(254) not null,
    password varchar not null,
    phone varchar not null,
    active boolean default true,
    constraint engineer_pk
    primary key (id),
    constraint engineer_pk_2
    unique (email),
    constraint engineer_pk_3
    unique (phone)
    );

create table if not exists worker
(
    id integer generated by default as identity,
    name varchar(70),
    email varchar(254) not null,
    password varchar not null,
    phone varchar not null,
    team integer,
    active boolean default true,
    constraint worker_pk
    primary key (id),
    constraint worker_pk_2
    unique (email),
    constraint worker_pk_3
    unique (phone)
    );

create table if not exists team
(
    id integer generated by default as identity,
    busy boolean default false,
    leader integer not null,
    constraint team_pk
    primary key (id),
    constraint team_worker_id_fk
    foreign key (leader) references worker
    );

alter table worker
    add constraint worker_team_id_fk
        foreign key (team) references team;

create table if not exists state
(
    id integer generated by default as identity,
    description text,
    constraint state_pk
    primary key (id)
    );

create table if not exists material
(
    id integer generated by default as identity,
    name varchar not null,
    value_unit numeric not null,
    quantity integer not null,
    constraint material_pk
    primary key (id)
    );

create table if not exists client_type
(
    id integer generated by default as identity,
    type varchar not null,
    constraint client_type_pk
    primary key (id)
    );

create table if not exists zipcode
(
    id varchar not null,
    district varchar not null,
    city varchar not null,
    locale varchar not null,
    constraint zipcode_pk
    primary key (id)
    );

create table if not exists client
(
    id integer generated by default as identity,
    name varchar(70),
    email varchar(254) not null,
    password varchar not null,
    phone varchar not null,
    address text,
    door integer,
    zipcode varchar,
    client_type integer not null,
    active boolean default true,
    constraint client_pk
    primary key (id),
    constraint client_pk_2
    unique (email),
    constraint client_pk_3
    unique (phone),
    constraint client_client_type_id_fk
    foreign key (client_type) references client_type,
    constraint client_zipcode_zipcode_fk
    foreign key (zipcode) references zipcode
    );

create table if not exists project
(
    id integer generated by default as identity,
    client integer not null,
    engineer integer not null,
    file_path varchar,
    create_date date default CURRENT_DATE,
    accepted boolean,
    constraint projects_pk
    primary key (id),
    constraint projects_client_id_fk
    foreign key (client) references client,
    constraint projects_engineer_id_fk
    foreign key (engineer) references engineer
    );

create table if not exists budget
(
    id integer generated by default as identity,
    client integer not null,
    engineer integer not null,
    file_path varchar,
    create_date date default CURRENT_DATE,
    accepted boolean,
    project integer not null,
    constraint budget_pk
    primary key (id),
    constraint budget_client_id_fk
    foreign key (client) references client,
    constraint budget_engineer_id_fk
    foreign key (engineer) references engineer,
    constraint budget_project_id_fk
    foreign key (project) references project
    );

create table if not exists stage
(
    id integer generated by default as identity,
    budget integer not null,
    state integer not null,
    description text,
    constraint stage_pk
    primary key (id),
    constraint stage_budget_id_fk
    foreign key (budget) references budget,
    constraint stage_state_id_fk
    foreign key (state) references state
    );

create table if not exists construction
(
    id integer generated by default as identity,
    team integer,
    budget integer,
    stage integer,
    finished boolean default false,
    last_update date,
    start_date date,
    constraint construction_pk
    primary key (id),
    constraint construction_budget_id_fk
    foreign key (budget) references budget,
    constraint construction_stage_id_fk
    foreign key (stage) references stage,
    constraint construction_team_id_fk
    foreign key (team) references team
    );

create table if not exists stage_material
(
    stage integer not null,
    material integer not null,
    quantity integer not null,
    constraint stage_material_pk
    primary key (material, stage),
    constraint stage_material_stage_id_fk
    foreign key (stage) references stage,
    constraint stage_material_material_id_fk
    foreign key (material) references material
    );

create table if not exists complaint
(
    id integer generated by default as identity,
    client integer not null,
    construction integer not null,
    description text not null,
    constraint complaint_pk
    primary key (id),
    constraint complaint_client_id_fk
    foreign key (client) references client,
    constraint complaint_construction_id_fk
    foreign key (construction) references construction
    );

create table if not exists invoice
(
    id integer generated by default as identity,
    stage integer not null,
    client integer not null,
    total numeric,
    issue_date date default CURRENT_DATE,
    paid boolean default false,
    constraint invoice_pk
    primary key (id),
    constraint invoice_stage_id_fk
    foreign key (stage) references stage,
    constraint invoice_client_id_fk
    foreign key (client) references client
    );

create or replace function create_invoice_on_stage_finish() returns trigger
    language plpgsql
as $$
DECLARE
    total_value NUMERIC;
BEGIN
    IF NEW.state = (SELECT id FROM state WHERE description = 'Finished') THEN
        SELECT SUM(sm.quantity * m.value_unit) INTO total_value
        FROM stage_material sm
                 JOIN material m ON sm.material = m.id
        WHERE sm.stage = NEW.id;

        INSERT INTO invoice (stage, client, total, issue_date)
        VALUES (NEW.id, (SELECT client FROM budget WHERE id = NEW.budget), total_value, CURRENT_DATE);
    END IF;
    RETURN NEW;
END;
$$;

create trigger trigger_create_invoice
    after insert or update
    on stage
    for each row
execute procedure create_invoice_on_stage_finish();

INSERT INTO secretary (name, email, password, phone)
VALUES ('Admin', 'admin@email.com', '8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918', '+351123456789');

-- Insert into client_type table
INSERT INTO client_type (type)
VALUES ('Normal');

-- Insert into client table
INSERT INTO client (name, email, password, phone, client_type)
VALUES ('client', 'client@email.com', '948fe603f61dc036b5c596dc09fe3ce3f3d30dc90f024c85f3c82db2ccab679d', '+351123456789', 1);

-- Insert into worker table
INSERT INTO worker (name, email, password, phone)
VALUES ('worker', 'worker@email.com', '87eba76e7f3164534045ba922e7770fb58bbd14ad732bbf5ba6f11cc56989e6e', '+351123456789');

-- Insert into team table
INSERT INTO team (leader)
VALUES (1);

UPDATE worker
SET team = 1
WHERE id = 1;

-- Insert into worker table (teixeira)
INSERT INTO worker (name, email, password, phone, team)
VALUES ('worker2', 'worker2@email.com', '5257586a4579fd12221c855b9cacf4c5bba169e31d5ebde2acaa8d502e57dcbe', '+351987654321', 1);

-- Insert into material table
INSERT INTO material (name, value_unit, quantity)
VALUES ('Wood', 3.50, 100),
       ('Concrete', 3.50, 100),
       ('Bricks', 3.50, 100);

-- Insert into engineer table
INSERT INTO engineer (name, email, password, phone)
VALUES ('engineer', 'engineer@email.com', '7826b958b79c70626801b880405eb5111557dadceb2fee2b1ed69a18eed0c6dc', '+351010192925');

-- Insert into project table
INSERT INTO project (client, engineer)
VALUES (1, 1);

-- Insert into budget table
INSERT INTO budget (client, engineer, project)
VALUES (1, 1, 1);

-- Insert into state table
INSERT INTO state (description)
VALUES ('In progress'), ('Finished');

-- Insert into stage table
INSERT INTO stage (budget, state, description)
VALUES (1, 1, 'Fix Walls');

-- Insert into stage_material table
INSERT INTO stage_material (stage, material, quantity)
VALUES (1, 1, 20),
       (1, 2, 20),
       (1, 3, 20);

-- Insert into construction table
INSERT INTO construction (team, budget, stage, start_date)
VALUES (1, 1, 1, NOW());
